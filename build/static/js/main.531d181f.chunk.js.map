{"version":3,"sources":["components/CheckBox.js","components/SelectDropdown.js","App.js","index.js"],"names":["CheckBox","React","forwardRef","props","ref","checked","label","readOnly","indeterminate","className","onChange","type","SelectDropdown","useState","data","filteredData","setFilteredData","searchInput","setSearchInput","multiselect","selectedOptions","setSelections","isOptionVisible","setOptionVisibility","selectAll","setSelectAll","selectAllCheckBox","useRef","useEffect","length","current","document","addEventListener","removeEventListener","handleOptionClick","e","currentOption","currentTarget","getAttribute","selectedIndex","indexOf","stateToUpdate","splice","placeholder","searchable","isIndeterminate","isSelectAllChecked","onClick","stopPropagation","join","value","onInputChange","userInput","target","toLowerCase","updatedData","filter","item","allValues","map","index","selectOptionLabel","defaultProps","colorsData","colorsObj","title","id","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.531d181f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/checkbox.css';\r\n\r\nconst propTypes = {\r\n    /** Boolean value to indicate if checbox is checked or not */\r\n    checked: PropTypes.bool,\r\n    /** Label for the checkbox */\r\n    label: PropTypes.string,\r\n    /** Boolean value to set semi selected type in the checkbox */\r\n    indeterminate: PropTypes.bool,\r\n    /** Boolean value to render checkbox as readonly */\r\n    readOnly: PropTypes.bool,\r\n    /** A function to be fired on change of checkbox */\r\n    onChange: PropTypes.func,\r\n}\r\n\r\nconst CheckBox = React.forwardRef((props, ref) =>{\r\n    const {checked, label, readOnly, indeterminate} = props;\r\n    return (\r\n        <div className={`checkbox ${checked ? 'checked': ''} ${indeterminate ? 'semi-selection': ''}`}>\r\n            <span className=\"checbox-input-wrapper\">\r\n                <input ref={ref} readOnly={readOnly} onChange={props.onChange} type=\"checkbox\" checked={checked} />\r\n                <span className=\"checkbox-input\"></span>\r\n            </span>\r\n            {label && <span className=\"checkbox-label\">{label}</span>}\r\n        </div>\r\n    )\r\n})\r\n\r\nCheckBox.propTypes = propTypes;\r\n\r\nexport default CheckBox;","import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CheckBox from './CheckBox';\r\n\r\nconst propTypes = {\r\n    /** Data for options of select dropdown */\r\n    data: PropTypes.array,\r\n    /** Placeholder text for select dropdwon */\r\n    placeholder: PropTypes.string,\r\n    /** Boolean value to set if the select dropdown is searchable */\r\n    searchable: PropTypes.bool,\r\n    /** Boolean value to set if the select dropdown has multiple select option */\r\n    multiselect: PropTypes.bool,\r\n    /** The key of value to be displayed in the select */\r\n    label: PropTypes.string,\r\n    /** Callback function to be fired on text input change */\r\n    onInputChange: PropTypes.func\r\n}\r\n\r\nconst defaultProps = {\r\n    data: [],\r\n    placeholder: 'Select',\r\n    searchable: true,\r\n    multiselect: false,\r\n    label: \"\",\r\n}\r\n\r\nfunction SelectDropdown(props) {\r\n\r\n    const [filteredData, setFilteredData] = useState(props.data);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [selectedOptions, setSelections] = useState(props.multiselect ? [] : \"\");\r\n    const [isOptionVisible, setOptionVisibility] = useState(false);\r\n    const [selectAll, setSelectAll] = useState(false);\r\n    const selectAllCheckBox =  useRef(null);\r\n\r\n    useEffect(() => {\r\n        if(selectedOptions.length && selectedOptions.length !== props.data.length && selectAllCheckBox.current ) {\r\n           selectAllCheckBox.current.indeterminate = true;\r\n        }\r\n        else if(selectAllCheckBox.current) {\r\n           selectAllCheckBox.current.indeterminate = false;\r\n        }\r\n    }, [selectedOptions])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', () => {\r\n            setOptionVisibility(false);\r\n        })\r\n\r\n        return () => {\r\n            document.removeEventListener('click', () => {\r\n                setOptionVisibility(false)\r\n            })\r\n        }\r\n    })\r\n\r\n    const handleInputChange = (e) => {\r\n        const {label, data, onInputChange} = props;\r\n        let userInput = e.target.value.toLowerCase();\r\n        let updatedData = data.filter((item) => {\r\n            let optionText = label ? item[label]: item;\r\n            return optionText.toLowerCase().indexOf(userInput) !== -1\r\n        })\r\n\r\n        setFilteredData(updatedData);\r\n        setSearchInput(userInput);\r\n\r\n        if(onInputChange) {\r\n            onInputChange(e);\r\n        }\r\n    }\r\n\r\n    const toggleOptions = () => {\r\n        setOptionVisibility(!isOptionVisible);\r\n    }\r\n\r\n    const handleOptionClick = (e) => {\r\n        const {multiselect, data} = props;\r\n        let currentOption = e.currentTarget.getAttribute('data-value');\r\n        if(multiselect) {\r\n            let selectedIndex = selectedOptions.indexOf(currentOption);\r\n            if(selectedIndex === -1) {\r\n                setSelections([...selectedOptions, currentOption]);\r\n            }\r\n            else {\r\n                let stateToUpdate = [...selectedOptions];\r\n                stateToUpdate.splice(selectedIndex, 1);\r\n                setSelections([...stateToUpdate]);\r\n                setSelectAll(false)\r\n            }   \r\n        }\r\n        else {\r\n            setSelections(currentOption);\r\n            setOptionVisibility(false);\r\n            setSearchInput('');\r\n            setFilteredData(data);\r\n        }\r\n    }\r\n\r\n    const handleSelectAllClick = (e) => {\r\n        const {label, data} = props;\r\n        let allValues = label ? data.map(item => item[label]): data;\r\n        \r\n        if(selectedOptions.length && selectedOptions !== data.length) {\r\n            setSelectAll(false);\r\n            setSelections([]);\r\n            return;\r\n        }\r\n\r\n        if(e.target.checked) {\r\n            setSelections(allValues);\r\n            setSelectAll(true)\r\n        }\r\n        else {\r\n            setSelections([]);\r\n            setSelectAll(false);\r\n        }\r\n    }\r\n\r\n    const setSelectedValue = () => {\r\n        const {multiselect} = props;\r\n        let selectedValue = multiselect ? selectedOptions.join(',') : selectedOptions;\r\n        return selectedValue;\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setSelections([]);\r\n        setSelectAll(false);\r\n    }\r\n\r\n    const handleSubmitClick = () => {\r\n        setOptionVisibility(false);\r\n    }\r\n\r\n    const handleSelectDropdownClick = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    const {\r\n        placeholder,\r\n        searchable,\r\n        multiselect,\r\n        label,\r\n        data\r\n    } = props;\r\n\r\n    const isIndeterminate = selectedOptions.length > 0 && selectedOptions.length !== data.length;\r\n    const isSelectAllChecked = selectAll || selectedOptions.length == data.length;\r\n\r\n    return (\r\n        <div className=\"select-dropdown\" onClick={handleSelectDropdownClick}>\r\n            <div className=\"select-input-wrapper\" onClick={toggleOptions}> \r\n                <div className=\"select-input input-placeholder\">\r\n                    {selectedOptions.length ? <span>{placeholder} - <span className=\"selected-highlighter\">{setSelectedValue()}</span></span>: placeholder }\r\n                </div>\r\n                <span className={`select-arrow ${isOptionVisible ? 'active': ''}`}></span>\r\n            </div>\r\n            {isOptionVisible && \r\n                <div className='select-options-container'>\r\n                    {searchable ? <input className=\"select-input search-input\" placeholder='Search' value={searchInput} onChange={handleInputChange} /> : null }\r\n                    <div className=\"options-wrapper\">\r\n                        {multiselect &&\r\n                            <div className=\"select-options__item\">\r\n                                <CheckBox ref={selectAllCheckBox} onChange={handleSelectAllClick} checked={isSelectAllChecked} indeterminate={isIndeterminate} />\r\n                            </div>\r\n                        }\r\n                        <ul className=\"select-options-list\">\r\n                            {\r\n                                filteredData && filteredData.map((item, index) => {\r\n                                    let selectOptionLabel = label ? item[label] : item;\r\n                                    return ( \r\n                                            multiselect ? \r\n                                            <li onClick={handleOptionClick} key={index} data-value={selectOptionLabel} className=\"select-options__item\">\r\n                                                <CheckBox readOnly checked={selectedOptions.indexOf(selectOptionLabel) !== -1} label={selectOptionLabel} />\r\n                                            </li>: \r\n                                            <li onClick={handleOptionClick} key={index} data-value={selectOptionLabel} className={`select-options__item  ${selectedOptions.indexOf(selectOptionLabel) !== -1 ? 'selected-option': ''}`}>\r\n                                                {selectOptionLabel}\r\n                                            </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                        {multiselect &&\r\n                            <div className=\"select-option-footer\">\r\n                                <button className=\"btn\" onClick={handleClearClick}>Clear</button>\r\n                                <button className=\"btn btn-primary\" onClick={handleSubmitClick}>Submit</button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nSelectDropdown.propTypes = propTypes;\r\nSelectDropdown.defaultProps = defaultProps;\r\n\r\nexport default SelectDropdown;\r\n","import '../src/styles/styles.css';\r\nimport SelectDropdown from './components/SelectDropdown';\r\n\r\nconst colorsData = ['red', 'green', 'blue', 'yellow', 'orange', 'purple', 'cyan'];\r\nconst colorsObj = [\r\n  {\r\n    title: 'red',\r\n    id: 1\r\n  },\r\n  {\r\n    title: 'green',\r\n    id: 2\r\n  },\r\n  {\r\n    title: 'blue',\r\n    id: 3\r\n  },\r\n  {\r\n    title: 'yellow',\r\n    id: 4\r\n  },\r\n  {\r\n    title: 'orange',\r\n    id: 5\r\n  },\r\n  {\r\n    title: 'purple',\r\n    id: 6\r\n  }\r\n]\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"display-wrapper\">\r\n        <p className=\"display-title\">Default Select Dropdown</p>\r\n        <SelectDropdown placeholder=\"Colors\" label=\"title\" data={colorsObj}/>\r\n      </div>\r\n      <div className=\"display-wrapper\">\r\n        <p className=\"display-title\">Searcahble Multiselect Select Dropdown</p>\r\n        <SelectDropdown placeholder=\"Colors\" multiselect={true} data={colorsData}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}